import stripe
from concurrent import futures

from tornado import gen
from tornado.concurrent import run_on_executor

from services.stripe.exceptions import StripeTransactionException


class StripeService:
	def __init__( self, logger ):
		self.executor = futures.ThreadPoolExecutor( 10 )
		self.logger = logger

	@gen.coroutine
	def create_new_customer( self, user, user_agent, x_forwarded_for, client_ip, stripe_source_token=None ):
		"""
		Creates a new customer entry in Stripe via their API. Metadata is for fraud reasons.
		The "stripe source token" is used to associate a payment method with the created account. This token is
		generated by the front-end Stripe SDK and sent to the backend for use here.
		For free-tier users, we don't pass a Stripe token up.
		:param user: The User model instance to pull data from
		:param user_agent: Pulled from inbound request headers
		:param x_forwarded_for: Pulled from inbound request headers
		:param client_ip: Pulled from inbound request
		:param stripe_source_token: (Optional) Generated by the Javascript SDK and sent up.
		:returns: Customer ID of the customer in Stripe's database
		"""
		try:
			customer_id = yield self.stripe_create_customer(
				user.email,
				user.name,
				user.phone_number,
				stripe_source_token,
				{
					"user_agent": user_agent,
					"client_ip": client_ip,
					"x_forwarded_for": x_forwarded_for,
				}
			)
		except stripe.error.CardError as e:
			self.logger( "Card declined: " + repr( e ) )
			raise StripeTransactionException( "Invalid payment information", "INVALID_CARD_ERROR" )
		except stripe.error.StripeError as e:
			self.logger( "Exception occurred while creating stripe account: " + repr( e ))
			raise StripeTransactionException(
				"An error occurred while communicating with the Stripe API",
				"GENERIC_STRIPE_ERROR"
			)
		except Exception as e:
			self.logger( "Exception occurred while creating stripe account: " + repr( e ) )
			raise StripeTransactionException( "Some unknown error occurred", "UNKNOWN_ERROR" )

		raise gen.Return(customer_id)

	@run_on_executor
	def stripe_create_customer( self, email, name, phone_number, stripe_source_token, metadata_dict ):
		# Create a customer in Stripe
		customer = stripe.Customer.create(
			email=email,
			name=name,
			phone=phone_number,
			source=stripe_source_token,
			metadata=metadata_dict
		)

		return customer[ "id" ]
