version: 0.2

env:
  exported-variables:
    - ENV
    - REPOSITORY_URI
    - AWS_DEFAULT_REGION
    - CODEBUILD_RESOLVED_SOURCE_VERSION
    - CLOUDFRONT_URL
    - S3_DEPLOY_PATH
    - APP_API_URL
    - EKS_CLUSTER_NAME
    - EKS_KUBECTL_ROLE_ARN
  secrets-manager:
    REFINERY_AWS_ACCOUNT_ID: refinery-secrets-kubes-prod:REFINERY_AWS_ACCOUNT_ID
    REFINERY_AWS_ACCESS_KEY_ID: refinery-secrets-kubes-prod:REFINERY_AWS_ACCESS_KEY_ID
    REFINERY_AWS_SECRET_ACCESS_KEY: refinery-secrets-kubes-prod:REFINERY_AWS_SECRET_ACCESS_KEY
    SERVICE_SHARED_SECRET: refinery-secrets-kubes-prod:SERVICE_SHARED_SECRET
    MAILGUN_API_KEY: refinery-secrets-kubes-prod:MAILGUN_API_KEY
    COOKIE_SECRET_VALUE: refinery-secrets-kubes-prod:COOKIE_SECRET_VALUE
    STRIPE_API_KEY: refinery-secrets-kubes-prod:STRIPE_API_KEY
    INTERCOM_HMAC_SECRET: refinery-secrets-kubes-prod:INTERCOM_HMAC_SECRET
    GITHUB_CLIENT_ID: refinery-secrets-kubes-prod:GITHUB_CLIENT_ID
    GITHUB_CLIENT_SECRET: refinery-secrets-kubes-prod:GITHUB_CLIENT_SECRET
    POSTGRESQL_PASSWORD: refinery-secrets-kubes-prod:POSTGRESQL_PASSWORD
    DOCKER_USERNAME: refinery-secrets-kubes-prod:DOCKER_USERNAME
    DOCKER_PASSWORD: refinery-secrets-kubes-prod:DOCKER_PASSWORD

phases:
  install:
    runtime-versions:
      docker: 18
    commands:
      - apt update
      - apt install -y awscli git python3
      - curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.12.7/2019-03-27/bin/linux/amd64/aws-iam-authenticator
      - chmod +x ./aws-iam-authenticator
      - mkdir -p ~/bin && cp ./aws-iam-authenticator ~/bin/aws-iam-authenticator && export PATH=~/bin:$PATH
      - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
      - chmod +x kubectl
      - mv ./kubectl /usr/local/bin/kubectl
      - curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > get_helm.sh
      - chmod 700 get_helm.sh
      - ./get_helm.sh
  pre_build:
    commands:
      - echo Logging in to Docker Hub...
      - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - echo Logging in to Amazon ECR...
      - aws --version
      - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      - echo Updating kube config...
      - aws --region $AWS_DEFAULT_REGION eks update-kubeconfig --name $EKS_CLUSTER_NAME --role-arn $EKS_KUBECTL_ROLE_ARN
      - WORKFLOW_MANAGER_REPO=$REPOSITORY_URI/workflow-manager
      - WORKFLOW_MANAGER_WORKER_REPO=$REPOSITORY_URI/workflow-manager-worker
      - API_SERVER_REPO=$REPOSITORY_URI/refinery-api-server-kubes
      - FRONT_END_REPO=$REPOSITORY_URI/refinery-nginx-server-kubes
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
  build:
    commands:
      - echo Build started on `date`

      - echo Building the Refinery Frontend...
      - cd ./front-end
      - ./build/build-production-assets.sh
      - mv front-end-dist ../nginx-container/front-end-dist
      - cd ..
      - docker build -t $FRONT_END_REPO:latest ./nginx-container/
      - docker tag $FRONT_END_REPO:latest $FRONT_END_REPO:$IMAGE_TAG

      - echo Building the Refinery API server Docker image...
      - docker build -t $API_SERVER_REPO:latest ./api/
      - docker tag $API_SERVER_REPO:latest $API_SERVER_REPO:$IMAGE_TAG

      - echo Building the Refinery Workflow Manager Docker image...
      - docker build -t $WORKFLOW_MANAGER_REPO:latest -f ./golang/docker/Dockerfile.workflow-manager ./golang
      - docker tag $WORKFLOW_MANAGER_REPO:latest $WORKFLOW_MANAGER_REPO:$IMAGE_TAG

      - echo Building the Refinery Workflow Manager Worker Docker image...
      - docker build -t $WORKFLOW_MANAGER_WORKER_REPO:latest -f ./golang/docker/Dockerfile.workflow-manager-worker ./golang
      - docker tag $WORKFLOW_MANAGER_WORKER_REPO:latest $WORKFLOW_MANAGER_WORKER_REPO:$IMAGE_TAG
  post_build:
    commands:
      - cd ./helm/refinery
      - echo Build completed on `date`

      - echo Pushing the Docker front end image...
      - docker push $FRONT_END_REPO:latest
      - docker push $FRONT_END_REPO:$IMAGE_TAG

      - echo Pushing the Docker API server image...
      - docker push $API_SERVER_REPO:latest
      - docker push $API_SERVER_REPO:$IMAGE_TAG

      - echo Pushing the Refinery Workflow Manager Docker image...
      - docker push $WORKFLOW_MANAGER_REPO:latest
      - docker push $WORKFLOW_MANAGER_REPO:$IMAGE_TAG

      - echo Pushing the Refinery Workflow Manager Worker Docker image...
      - docker push $WORKFLOW_MANAGER_WORKER_REPO:latest
      - docker push $WORKFLOW_MANAGER_WORKER_REPO:$IMAGE_TAG

      - |
        tee ./secrets.yaml <<END
        secrets:
          awsAccessKeyID: $REFINERY_AWS_ACCESS_KEY_ID
          awsSecretAccessKey: $REFINERY_AWS_SECRET_ACCESS_KEY
          serviceSharedSecret: $SERVICE_SHARED_SECRET
          mailgunApiKey: $MAILGUN_API_KEY
          cookieSecretValue: $COOKIE_SECRET_VALUE
          stripeApiKey: $STRIPE_API_KEY
          intercomHMACSecret: $INTERCOM_HMAC_SECRET
          githubClientID: $GITHUB_CLIENT_ID
          githubClientSecret: $GITHUB_CLIENT_SECRET

        aws:
          accountID: "$REFINERY_AWS_ACCOUNT_ID"

        postgresql:
          postgresqlPassword: $POSTGRESQL_PASSWORD
        END

      - helm dependencies update
      - |
        helm upgrade \
        --kubeconfig ~/.kube/config \
        --namespace $EKS_CLUSTER_NAME \
        -f ./values.$ENV.yaml \
        -f ./secrets.yaml \
        --set repositoryURI=$REPOSITORY_URI \
        --set apiServer.container.tag=$IMAGE_TAG \
        --set frontEnd.container.tag=$IMAGE_TAG \
        --set workflowManager.container.tag=$IMAGE_TAG \
        --set workflowMangaerWorker.container.tag=$IMAGE_TAG \
        refinery .
