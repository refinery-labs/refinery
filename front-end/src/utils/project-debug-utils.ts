import { saveAs } from 'file-saver';
import { LambdaWorkflowState, RefineryProject, SupportedLanguage } from '@/types/graph';
import yaml from 'js-yaml';

export interface ZippableFileContents {
  fileName: string;
  contents: string;
}

export interface ProjectDownloadZipMetadata {
  projectName: string;
  projectId: string;
  projectVersion: number;
  blockName: string;
  blockId: string;
  version: string;
  blockDependencies: string[];
}

export interface ProjectDownloadZipConfig {
  inputData: object;
  backpackData: object;
  blockCode: string;
  blockLanguage: SupportedLanguage;
  metadata: ProjectDownloadZipMetadata;
}

export type ZippableFileList = ZippableFileContents[];

export type LanguageToStringLookup = { [key in SupportedLanguage]: string };

export const languageToRunScriptLookup: LanguageToStringLookup = {
  [SupportedLanguage.NODEJS_8]: 'node run_code.js',
  [SupportedLanguage.NODEJS_10]: 'node run_code.js',
  [SupportedLanguage.NODEJS_1020]: 'node run_code.js',
  [SupportedLanguage.PYTHON_3]: 'python run_code.py',
  [SupportedLanguage.PYTHON_2]: 'python run_code.py',
  [SupportedLanguage.GO1_12]: 'go run run_code.go',
  [SupportedLanguage.PHP7]: 'php -f run_code.php',
  [SupportedLanguage.RUBY2_6_4]: 'ruby run_code.rb'
};

export const languageToFileExtension: LanguageToStringLookup = {
  [SupportedLanguage.NODEJS_10]: 'js',
  [SupportedLanguage.NODEJS_1020]: 'js',
  [SupportedLanguage.NODEJS_8]: 'js',
  [SupportedLanguage.PYTHON_3]: 'py',
  [SupportedLanguage.PYTHON_2]: 'py',
  [SupportedLanguage.GO1_12]: 'go',
  [SupportedLanguage.PHP7]: 'php',
  [SupportedLanguage.RUBY2_6_4]: 'rb'
};

const pythonPrependedCode = `
# Start of Refinery Generated Code
import traceback
import json
import sys
# End of Refinery Generated Code
`;

export const languageToPrependedCode: LanguageToStringLookup = {
  [SupportedLanguage.NODEJS_8]: '// This file was partially generated by Refinery',
  [SupportedLanguage.NODEJS_10]: '// This file was partially generated by Refinery',
  [SupportedLanguage.NODEJS_1020]: '// This file was partially generated by Refinery',
  [SupportedLanguage.PYTHON_3]: pythonPrependedCode,
  [SupportedLanguage.PYTHON_2]: pythonPrependedCode,
  [SupportedLanguage.GO1_12]: '// This file was partially generated by Refinery',
  [SupportedLanguage.PHP7]: '// This file was partially generated by Refinery',
  [SupportedLanguage.RUBY2_6_4]: '# This file was partially generated by Refinery'
};

const codeBlockPackageJson = {
  name: '',
  version: '0.0.1',
  description: 'Generated Code Block from refinery.io',
  main: 'run_code.js',
  dependencies: {}
};

function setPackageJsonDepsToLatest(dependencies: string[]) {
  return dependencies.reduce((deps, d) => {
    return {
      ...deps,
      [d]: '*'
    };
  }, {});
}

function getFormattedNodeDependencies(name: string, dependencies: string[]): ZippableFileContents | undefined {
  const hookedDependencies = [...dependencies, 'js-yaml'];

  const serializedPackageJson = JSON.stringify({
    ...codeBlockPackageJson,
    name: name,
    dependencies: setPackageJsonDepsToLatest(hookedDependencies)
  });

  return {
    fileName: 'package.json',
    contents: serializedPackageJson
  };
}

function getFormattedPythonDependencies(name: string, dependencies: string[]): ZippableFileContents | undefined {
  const hookedDependencies = [...dependencies, 'pyyaml'];

  return {
    fileName: 'requirements.txt',
    contents: hookedDependencies.join('\n')
  };
}

const depsNotSupported = (name: string, dependencies: string[]) => undefined;

export const languageToDependencies: Record<
  SupportedLanguage,
  (name: string, dependencies: string[]) => ZippableFileContents | undefined
> = {
  [SupportedLanguage.NODEJS_8]: getFormattedNodeDependencies,
  [SupportedLanguage.NODEJS_10]: getFormattedPythonDependencies,
  [SupportedLanguage.NODEJS_1020]: getFormattedNodeDependencies,
  [SupportedLanguage.PYTHON_3]: getFormattedPythonDependencies,
  [SupportedLanguage.PYTHON_2]: getFormattedPythonDependencies,
  [SupportedLanguage.GO1_12]: depsNotSupported,
  [SupportedLanguage.PHP7]: depsNotSupported,
  [SupportedLanguage.RUBY2_6_4]: depsNotSupported
};

const pythonAppendedCode = `
import yaml

from block_code import main

# Begin Refinery Generated Code
with open('block_config.json') as block_config_raw:
  block_config = yaml.safe_load(block_config_raw)
  input_data = block_config["input_data"]
  backpack_data = block_config["backpack_data"]

output_data = main(input_data, backpack_data)

print(json.dumps(output_data, indent=2))
# End Refinery Generated Code
`;

const nodeAppendedCode = `
// Begin Refinery Generated Code
const fs = require('fs');
const yaml = require('js-yaml');
const { main } = require('./block_code.js');

if (typeof main !== undefined) {
  async function runMainAsync() {
    try {
      const blockConfig = yaml.safeLoad(fs.readFileSync('./block_config.yaml', 'utf8'));
      const outputData = await main(blockConfig.input_data, blockConfig.backpack_data);
      console.log(JSON.stringify(outputData, null, 2));
    } catch (e) {
      console.error(JSON.stringify(e, null, 2));
      throw new Error(e);
    }
  }

  runMainAsync();

} else if (typeof mainCallback !== undefined) {
  mainCallback(inputData, backpackData, (err, outputData) => {
    if (err) {
      console.error(JSON.stringify(e, null, 2));
      throw new Error(e);
    }
   
    console.log(JSON.stringify(outputData, null, 2)); 
  });
} else {
  throw new Error('No entrypoint defined');
}
// End Refinery Generated Code
`;

export const languageToAppendedCode: LanguageToStringLookup = {
  [SupportedLanguage.NODEJS_8]: nodeAppendedCode,
  [SupportedLanguage.NODEJS_10]: nodeAppendedCode,
  [SupportedLanguage.NODEJS_1020]: nodeAppendedCode,
  [SupportedLanguage.PYTHON_3]: pythonAppendedCode,
  [SupportedLanguage.PYTHON_2]: pythonAppendedCode,
  [SupportedLanguage.GO1_12]:
    '\n// Not supported yet. Read block_config.yaml then call main().\nAlso email support@refinery.io and we will add this. :)',
  [SupportedLanguage.PHP7]:
    '\n// Not supported yet. Read block_config.yaml then call main().\nAlso email support@refinery.io and we will add this. :)',
  [SupportedLanguage.RUBY2_6_4]:
    '\n# Not supported yet. Read block_config.yaml then call main().\nAlso email support@refinery.io and we will add this. :)'
};

export function convertProjectDownloadZipConfigToFileList(config: ProjectDownloadZipConfig) {
  const zippableFiles: ZippableFileList = [];

  const inputConfigData = yaml.safeDump({
    input_data: config.inputData,
    backpack_data: config.backpackData
  });

  zippableFiles.push({
    fileName: 'input_config.yaml',
    contents: inputConfigData
  });

  zippableFiles.push({
    fileName: `run_code.${languageToFileExtension[config.blockLanguage]}`,
    contents: languageToPrependedCode[config.blockLanguage] + languageToAppendedCode[config.blockLanguage]
  });

  zippableFiles.push({
    fileName: `block_code.${languageToFileExtension[config.blockLanguage]}`,
    contents: config.blockCode
  });

  zippableFiles.push({
    fileName: `run_code.sh`,
    contents: languageToRunScriptLookup[config.blockLanguage]
  });

  const dependencyFile = languageToDependencies[config.blockLanguage](
    config.metadata.blockName,
    config.metadata.blockDependencies
  );
  if (dependencyFile) {
    zippableFiles.push(dependencyFile);
  }

  return zippableFiles;
}

/*
## Contents:
input-data.json
backpack-data.json
run-code.sh
block-code.py
metadata.json
 */

export async function createProjectDownloadZip(config: ProjectDownloadZipConfig) {
  // Lazy load this library since it is only used once in the app
  const jszip = await import('jszip');
  const zip = jszip.default();

  const filesToZip = convertProjectDownloadZipConfigToFileList(config);

  filesToZip.forEach(file => zip.file(file.fileName, file.contents));

  const zippedContents = await zip.generateAsync<'blob'>({
    type: 'blob'
  });

  const zipName = `refinery-${config.metadata.projectName}-${config.metadata.blockName}-${Date.now()}.zip`.replace(
    / /g,
    '_'
  );

  saveAs(zippedContents, zipName);
}

export async function downloadCodeBlockCode(block: LambdaWorkflowState) {
  const blob = new Blob([block.code], {
    type: 'text/plain;charset=utf-8'
  });
  saveAs(blob, `${block.name}-${Date.now()}.${languageToFileExtension[block.language]}`.replace(/ /g, '_'));
}

export function createDownloadZipConfig(
  project: RefineryProject,
  block: LambdaWorkflowState
): ProjectDownloadZipConfig {
  return {
    inputData: JSON.parse(block.saved_input_data || '{}'),
    backpackData: {},
    blockCode: block.code,
    blockLanguage: block.language,
    metadata: {
      blockName: block.name,
      blockId: block.id,
      blockDependencies: block.libraries,
      projectName: project.name,
      projectId: project.project_id,
      projectVersion: project.version,
      version: '1.0.0'
    }
  };
}

export async function downloadBlockAsZip(project: RefineryProject, block: LambdaWorkflowState) {
  const downloadZipConfig = createDownloadZipConfig(project, block);

  await createProjectDownloadZip(downloadZipConfig);
}
