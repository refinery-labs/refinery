version: "3"
services:
    refinery:
        build: .
        depends_on:
            - postgresdb
        environment:
            # Instance URL, used for sending emails, etc.
            web_origin: "https://example.refinerylabs.io"
            # The HTTP origin to serve in Access-Control-Allow-Origin header
            access_control_allow_origin: https://example.refinerylabs.io
            # Master keys for the master account of the AWS org
            aws_access_key: REPLACE_ME_WITH_ORG_ROOT_ACCOUNT_ACCESS_KEY
            aws_secret_key: REPLACE_ME_WITH_ORG_ROOT_ACCOUNT_SECRET_KEY
            aws_account_id: REPLACE_ME_WITH_ORG_ROOT_ACCOUNT_ID
            region_name: REPLACE_ME_WITH_ORG_ROOT_ACCOUNT_REGION
            # JSON array of allowed origins
            access_control_allow_origins: "[\"http://localhost:1234\",\"http://localhost:8080\",\"http://localhost:8002\"]"
            # Really does nothing, should be removed at some point
            vpc_data: "{}"
            # The postgres username
            postgreql_username: refinery
            # The postgres password
            postgreql_password: refinery
            # The postgres database
            postgres_db: refinery
            # The postgres database
            postgresql_host: postgresdb
            # Whether debugging mode is enabled for tornado
            is_debug: "true"
            # Whether Cloudflare auth is enabled
            cf_enabled: "true"
            # Cloudflare Access AUD
            cf_policy_aud: REPLACE_ME_WITH_CLOUDFLARE_ACCESS_AUD
            # Cloudflare Access URL to grab cert keys
            cf_certs_url: https://refinery.cloudflareaccess.com/cdn-cgi/access/certs
            # The SES send-from email - this must be verified in SES
            ses_emails_from_email: REPLACE_ME_WITH_SES_SEND_FROM_EMAIL
            # How long the email token should last before expiring
            email_token_lifetime: 10800 # 3 hours before the email authentication token no longer works
            # Secret value for the HMACed cookies
            cookie_secret_value: SUPER_SECRET_VALUE_1234
            # How many days the HTTP cookies last for
            cookie_expire_days: 7
            # How much we mark up AWS's costs for managed AWS accounts
            mark_up_percent: 20
            # The Stripe API key
            stripe_api_key: REPLACE_ME_WITH_STRIPE_KEY_ENSURE_ITS_TENANCY_APPROPRIATE
            # Whether to finalize invoices or leave them in draft for manual approval
            # and final sending.
            stripe_finalize_invoices: "false"
            # The email address which is notified when we have an hour to review the
            # invoices before they go out.
            billing_alert_email: REPLACE_ME_WITH_SES_VERIFIED_SEND_TO_EMAIL
            # The free-trial account maximum amount that a account is allowed
            # to incur before the account is frozen.
            free_trial_billing_limit: "10.00"
            # This specifies the max time for the assume role action
            # We have a per-account ceiling of 1-hour, but we should basically always
            # be assuming for less time than that.
            assume_role_session_lifetime_seconds: "900"
            # Alerts for when a free-trial account goes over the limit
            free_trial_freeze_alerts: REPLACE_ME_WITH_SES_VERIFIED_SEND_TO_EMAIL
            # Shared secret for /service/ endpoints to be triggered
            service_shared_secret: SUPER_SECRET_SERVICE_VALUE_1234
            # The email suffix for customer AWS accounts
            customer_aws_email_suffix: "@mail.refineryusercontent.com"
            # The prefix for customer AWS accounts
            customer_aws_email_prefix: "aws-"
            # The IAM role we have in all customer accounts so we can administrate them
            # This should only be changed when this is run in dev VS prod. Otherwise this
            # value should never change
            customer_aws_admin_assume_role: DO_NOT_DELETE_REFINERY_SYSTEM_ACCOUNT
            # The target amount of AWS accounts in the pool, these are the
            # AWS accounts which are frozen for customers to start using.
            reserved_aws_pool_target_amount: 5
        ports:
            - "80:1234"
        volumes:
            - ./api/:/work/api/ # Mounting these as volumes allows live reloading
            - ./gui/:/work/gui/
    front-end:
        build: ./front-end
        environment:
          NODE_ENV: development
          VUE_APP_API_HOST: "http://localhost:8002"
        ports:
            - "8080:8080"
        volumes:
            - ./front-end/:/work/front-end/
            - /work/front-end/node_modules # This will copy in node_modules from the built image, because magic
            # More info on above magic here: https://stackoverflow.com/questions/30043872/docker-compose-node-modules-not-present-in-a-volume-after-npm-install-succeeds
    postgresdb:
        image: postgres
        environment:
            POSTGRES_PASSWORD: refinery
            POSTGRES_USER: refinery
            POSTGRES_DB: refinery
        ports:
            - "5432:5432"
